name: CI Build and Deploy

on:
  workflow_dispatch:
    inputs:
      TARGET_ENV:
        description: 'Select environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      IMAGE_TAG:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
      SKIP_DEPLOY:
        description: 'Skip Kubernetes deployment'
        required: false
        default: false
        type: boolean

  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ci

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Dockerfile exists
        run: |
          if [ ! -f Dockerfile ]; then
            echo "❌ Dockerfile not found in root directory"
            exit 1
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm/v7,linux/arm64,linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: Create builder instance (ensure running)
        run: |
          docker buildx inspect multi-builder >/dev/null 2>&1 || docker buildx create --name multi-builder --use
          docker buildx inspect --bootstrap

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/arm/v7,linux/arm64,linux/amd64
          tags: ghcr.io/arkinfotech24/dummy-app:${{ github.event.inputs.IMAGE_TAG || github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up kubeconfig
        if: ${{ github.event.inputs.SKIP_DEPLOY != 'true' }}
        run: |
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d > $HOME/.kube/config
          echo "✅ Kubeconfig loaded"
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG_DATA }}

      - name: Deploy to Kubernetes
        if: ${{ github.event.inputs.SKIP_DEPLOY != 'true' }}
        env:
          IMAGE: ghcr.io/arkinfotech24/dummy-app:${{ github.event.inputs.IMAGE_TAG || github.sha }}
          TARGET_ENV: ${{ github.event.inputs.TARGET_ENV || 'dev' }}
        run: |
          export KUBECONFIG=$HOME/.kube/config
          echo "[INFO] Deploying to Kubernetes namespace: app-${TARGET_ENV}"
          kubectl apply -f k8s/namespaces.yaml
          envsubst < k8s/app-deployment-template.yaml | kubectl apply -f -
          envsubst < k8s/app-service-template.yaml | kubectl apply -f -
          kubectl -n app-${TARGET_ENV} rollout status deployment/dummy-app --timeout=120s

      - name: Verify Deployment
        if: ${{ github.event.inputs.SKIP_DEPLOY != 'true' }}
        env:
          TARGET_ENV: ${{ github.event.inputs.TARGET_ENV || 'dev' }}
        run: |
          export KUBECONFIG=$HOME/.kube/config
          echo "[INFO] Verifying deployment in app-${TARGET_ENV}..."
          kubectl -n app-${TARGET_ENV} get pods -l app=dummy-app
          kubectl -n app-${TARGET_ENV} get svc dummy-app


# name: CI Build and Deploy

# on:
#   workflow_dispatch:
#     inputs:
#       TARGET_ENV:
#         description: 'Select environment to deploy'
#         required: true
#         default: 'dev'
#         type: choice
#         options:
#           - dev
#           - test
#           - prod
#       IMAGE_TAG:
#         description: 'Image tag to deploy'
#         required: true
#         default: 'latest'
#       SKIP_DEPLOY:
#         description: 'Skip Kubernetes deployment'
#         required: false
#         default: false
#         type: boolean

#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

# permissions:
#   contents: read
#   packages: write
#   id-token: write

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     environment: ci

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Verify Dockerfile exists
#         run: |
#           if [ ! -f Dockerfile ]; then
#             echo "❌ Dockerfile not found in root directory"
#             exit 1
#           fi

#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v2
#         with:
#           platforms: linux/arm/v7,linux/arm64,linux/amd64

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
#         with:
#           driver: docker-container
#           install: true

#       - name: Create builder instance (ensure running)
#         run: |
#           docker buildx inspect multi-builder >/dev/null 2>&1 || docker buildx create --name multi-builder --use
#           docker buildx inspect --bootstrap

#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Build and push multi-arch image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           file: ./Dockerfile
#           push: true
#           platforms: linux/arm/v7,linux/arm64,linux/amd64
#           tags: ghcr.io/arkinfotech24/dummy-app:${{ github.event.inputs.IMAGE_TAG || github.sha }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       - name: Deploy to Kubernetes
#         if: ${{ github.event.inputs.SKIP_DEPLOY != 'true' }}
#         env:
#           IMAGE: ghcr.io/arkinfotech24/dummy-app:${{ github.event.inputs.IMAGE_TAG || github.sha }}
#           TARGET_ENV: ${{ github.event.inputs.TARGET_ENV || 'dev' }}
#         run: |
#           echo "[INFO] Deploying to Kubernetes namespace: app-${TARGET_ENV}"
#           kubectl apply -f k8s/namespaces.yaml
#           envsubst < k8s/app-deployment-template.yaml | kubectl apply -f -
#           envsubst < k8s/app-service-template.yaml | kubectl apply -f -
#           kubectl -n app-${TARGET_ENV} rollout status deployment/dummy-app --timeout=120s

#       - name: Verify Deployment
#         if: ${{ github.event.inputs.SKIP_DEPLOY != 'true' }}
#         env:
#           TARGET_ENV: ${{ github.event.inputs.TARGET_ENV || 'dev' }}
#         run: |
#           echo "[INFO] Verifying deployment in app-${TARGET_ENV}..."
#           kubectl -n app-${TARGET_ENV} get pods -l app=dummy-app
#           kubectl -n app-${TARGET_ENV} get svc dummy-app
